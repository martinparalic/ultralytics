# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# Default training settings and hyperparameters for medium-augmentation COCO training

task: detect # (str) YOLO task, i.e. detect, segment, classify, pose, obb
mode: train # (str) YOLO mode, i.e. train, val, predict, export, track, benchmark

# Train settings -------------------------------------------------------------------------------------------------------
model: # (str, optional) path to model file, i.e. yolov8n.pt, yolov8n.yaml
data: # (str, optional) path to data file, i.e. coco8.yaml
epochs: 100 # (int) number of epochs to train for
time: # (float, optional) number of hours to train for, overrides epochs if supplied
patience: 100 # (int) epochs to wait for no observable improvement for early stopping of training
batch: 16 # (int) number of images per batch (-1 for AutoBatch)
imgsz: 640 # (int | list) input images size as int for train and val modes, or list[h,w] for predict and export modes
save: True # (bool) save train checkpoints and predict results
save_period: -1 # (int) Save checkpoint every x epochs (disabled if < 1)
cache: False # (bool) True/ram, disk or False. Use cache for data loading
device: # (int | str | list, optional) device to run on, i.e. cuda device=0 or device=0,1,2,3 or device=cpu
workers: 8 # (int) number of worker threads for data loading (per RANK if DDP)
project: # (str, optional) project name
name: # (str, optional) experiment name, results saved to 'project/name' directory
exist_ok: False # (bool) whether to overwrite existing experiment
pretrained: True # (bool | str) whether to use a pretrained model (bool) or a model to load weights from (str)
optimizer: auto # (str) optimizer to use, choices=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
verbose: True # (bool) whether to print verbose output
seed: 0 # (int) random seed for reproducibility
deterministic: True # (bool) whether to enable deterministic mode
single_cls: False # (bool) train multi-class data as single-class
rect: False # (bool) rectangular training if mode='train' or rectangular validation if mode='val'
cos_lr: False # (bool) use cosine learning rate scheduler
close_mosaic: 10 # (int) disable mosaic augmentation for final epochs (0 to disable)
resume: False # (bool) resume training from last checkpoint
amp: True # (bool) Automatic Mixed Precision (AMP) training, choices=[True, False], True runs AMP check
fraction: 1.0 # (float) dataset fraction to train on (default is 1.0, all images in train set)
profile: False # (bool) profile ONNX and TensorRT speeds during training for loggers
freeze: None # (int | list, optional) freeze first n layers, or freeze list of layer indices during training
multi_scale: False # (bool) Whether to use multiscale during training
# Segmentation
overlap_mask: True # (bool) masks should overlap during training (segment train only)
mask_ratio: 4 # (int) mask downsample ratio (segment train only)
# Classification
dropout: 0.0 # (float) use dropout regularization (classify train only)

# Val/Test settings ----------------------------------------------------------------------------------------------------
val: True # (bool) validate/test during training
split: val # (str) dataset split to use for validation, i.e. 'val', 'test' or 'train'
save_json: False # (bool) save results to JSON file
save_hybrid: False # (bool) save hybrid version of labels (labels + additional predictions)
conf: # (float, optional) object confidence threshold for detection (default 0.25 predict, 0.001 val)
iou: 0.7 # (float) intersection over union (IoU) threshold for NMS
max_det: 300 # (int) maximum number of detections per image
half: False # (bool) use half precision (FP16)
dnn: False # (bool) use OpenCV DNN for ONNX inference
plots: True # (bool) save plots and images during train/val

# Predict settings -----------------------------------------------------------------------------------------------------
source: # (str, optional) source directory for images or videos
vid_stride: 1 # (int) video frame-rate stride
stream_buffer: False # (bool) buffer all streaming frames (True) or return the most recent frame (False)
visualize: False # (bool) visualize model features
augment: False # (bool) apply image augmentation to prediction sources
agnostic_nms: False # (bool) class-agnostic NMS
classes: # (int | list[int], optional) filter results by class, i.e. classes=0, or classes=[0,2,3]
retina_masks: False # (bool) use high-resolution segmentation masks
embed: # (list[int], optional) return feature vectors/embeddings from given layers

# Visualize settings ---------------------------------------------------------------------------------------------------
show: False # (bool) show predicted images and videos if environment allows
save_frames: False # (bool) save predicted individual video frames
save_txt: False # (bool) save results as .txt file
save_conf: False # (bool) save results with confidence scores
save_crop: False # (bool) save cropped images with results
show_labels: True # (bool) show prediction labels, i.e. 'person'
show_conf: True # (bool) show prediction confidence, i.e. '0.99'
show_boxes: True # (bool) show prediction boxes
line_width: # (int, optional) line width of the bounding boxes. Scaled to image size if None.

# Export settings ------------------------------------------------------------------------------------------------------

export:
  format:
    type: str
    description: Target format for the exported model, such as 'onnx', 'torchscript', 'tensorflow', or others, defining compatibility with various deployment environments.
    default: "torchscript"
    choices:
      [
        "torchscript",
        "onnx",
        "openvino",
        "engine",
        "coreml",
        "saved_model",
        "pb",
        "tflite",
        "edgetpu",
        "tfjs",
        "paddle",
        "ncnn",
      ]
  keras:
    type: bool
    description: Enables export to Keras format for TensorFlow SavedModel, providing compatibility with TensorFlow serving and APIs.
    default: False
  optimize:
    type: bool
    description: Applies optimization for mobile devices when exporting to TorchScript, potentially reducing model size and improving performance.
    default: False
  int8:
    type: bool
    description: Activates INT8 quantization, further compressing the model and speeding up inference with minimal accuracy loss, primarily for edge devices.
    default: False
  dynamic:
    type: bool
    description: Allows dynamic input sizes for ONNX, TensorRT and OpenVINO exports, enhancing flexibility in handling varying image dimensions.
    default: False
  simplify:
    type: bool
    description: Simplifies the model graph for ONNX exports with onnxslim, potentially improving performance and compatibility.
    default: True
  opset:
    type: int
    description: Specifies the ONNX opset version for compatibility with different ONNX parsers and runtimes. If not set, uses the latest supported version.
    default: None
  workspace:
    type: int
    description: Sets the maximum workspace size in GiB for TensorRT optimizations, balancing memory usage and performance.
    default: 4
    min: 0.5 # todo: Not sure about this 0.5
    max: 16 # todo: Not sure about this 16.0
  nms:
    type: bool
    description: Adds Non-Maximum Suppression (NMS) to the CoreML export, essential for accurate and efficient detection post-processing.
    default: False
  batch:
    type: int
    description: Specifies export model batch inference size or the max number of images the exported model will process concurrently in predict mode.
    default: 1
    min: 1
    max: 64

hyperparameters:
  lr0:
    type: float
    description: Initial learning rate (i.e. SGD=1E-2, Adam=1E-3) . Adjusting this value is crucial for the optimization process, influencing how rapidly model weights are updated.
    default: 0.01
    min: 0.0001
    max: 0.1
    scale: log
  lrf:
    type: float
    description: Final learning rate as a fraction of the initial rate = (lr0 * lrf), used in conjunction with schedulers to adjust the learning rate over time.
    default: 0.01
    min: 0.0001
    max: 0.1
    scale: log
  momentum:
    type: float
    description: Momentum factor for SGD or beta1 for Adam optimizers, influencing the incorporation of past gradients in the current update.
    default: 0.937
    min: 0.0
    max: 1.0
  weight_decay:
    type: float
    description: L2 regularization term, penalizing large weights to prevent overfitting.
    default: 0.0005
    min: 0.0
    max: 0.01
  warmup_epochs:
    type: float
    description: Number of epochs for learning rate warmup, gradually increasing the learning rate from a low value to the initial learning rate to stabilize training early on.
    default: 3.0
    min: 0.0
    max: 10.0
  warmup_momentum:
    type: float
    description: Initial momentum for warmup phase, gradually adjusting to the set momentum over the warmup period.
    default: 0.8
    min: 0.0
    max: 1.0
  warmup_bias_lr:
    type: float
    description: Learning rate for bias parameters during the warmup phase, helping stabilize model training in the initial epochs.
    default: 0.1
    min: 0.0
    max: 1.0
  box:
    type: float
    description: Weight of the box loss component in the loss function, influencing how much emphasis is placed on accurately predicting bounding box coordinates.
    default: 7.5
    min: 0.0
    max: 10.0
  cls:
    type: float
    description: Weight of the classification loss in the total loss function, affecting the importance of correct class prediction relative to other components.
    default: 0.5
    min: 0.0
    max: 1.0
  dfl:
    type: float
    description: Weight of the distribution focal loss, used in certain YOLO versions for fine-grained classification.
    default: 1.5
    min: 0.0
    max: 2.0
  pose:
    type: float
    description: Weight of the pose loss in models trained for pose estimation, influencing the emphasis on accurately predicting pose keypoints.
    default: 12.0
    min: 0.0
    max: 20.0
  kobj:
    type: float
    description: Weight of the keypoint objectness loss in pose estimation models, balancing detection confidence with pose accuracy.
    default: 1.0
    min: 0.0
    max: 2.0
  label_smoothing:
    type: float
    description: Applies label smoothing, softening hard labels to a mix of the target label and a uniform distribution over labels, can improve generalization.
    default: 0.0
    min: 0.0
    max: 0.1
  nbs:
    type: int
    description: Nominal batch size for normalization of loss.
    default: 64
    min: 1
    max: 128

augmentation:
  hsv_h:
    type: float
    description: Adjusts the hue of the image by a fraction of the color wheel, introducing color variability. Helps the model generalize across different lighting conditions.
    default: 0.015
    min: 0.0
    max: 1.0
  hsv_s:
    type: float
    description: Alters the saturation of the image by a fraction, affecting the intensity of colors. Useful for simulating different environmental conditions.
    default: 0.7
    min: 0.0
    max: 1.0
  hsv_v:
    type: float
    description: Modifies the value (brightness) of the image by a fraction, helping the model to perform well under various lighting conditions.
    default: 0.4
    min: 0.0
    max: 1.0
  degrees:
    type: float
    description: Rotates the image randomly within the specified degree range, improving the model's ability to recognize objects at various orientations.
    default: 0.0
    min: -180.0
    max: 180.0
  translate:
    type: float
    description: Translates the image horizontally and vertically by a fraction of the image size, aiding in learning to detect partially visible objects.
    default: 0.1
    min: 0.0
    max: 1.0
  scale:
    type: float
    description: Scales the image by a gain factor, simulating objects at different distances from the camera.
    default: 0.5
    min: 0.0
    max: 1.0 # todo: Not sure about this 1.0 should be original shape
  shear:
    type: float
    description: Shears the image by a specified degree, mimicking the effect of objects being viewed from different angles.
    default: 0.0
    min: -180.0
    max: 180.0
  perspective:
    type: float
    description: Applies a random perspective transformation to the image, enhancing the model's ability to understand objects in 3D space.
    default: 0.0
    min: 0.0
    max: 0.001
  flipud:
    type: float
    description: Flips the image upside down with the specified probability, increasing the data variability without affecting the object's characteristics.
    default: 0.0
    min: 0.0
    max: 1.0
  fliplr:
    type: float
    description: Flips the image left to right with the specified probability, useful for learning symmetrical objects and increasing dataset diversity.
    default: 0.5
    min: 0.0
    max: 1.0
  bgr:
    type: float
    description: Flips the image channels from RGB to BGR with the specified probability, useful for increasing robustness to incorrect channel ordering.
    default: 0.0
    min: 0.0
    max: 1.0
  mosaic:
    type: float
    description: Combines four training images into one, simulating different scene compositions and object interactions. Highly effective for complex scene understanding.
    default: 1.0
    min: 0.0
    max: 1.0
  mixup:
    type: float
    description: Blends two images and their labels, creating a composite image. Enhances the model's ability to generalize by introducing label noise and visual variability.
    default: 0.0
    min: 0.0
    max: 1.0
  copy_paste:
    type: float
    description: Copies objects from one image and pastes them onto another, useful for increasing object instances and learning object occlusion.
    default: 0.0
    min: 0.0
    max: 1.0
  copy_paste_mode:
    type: str
    description: Copy-Paste augmentation method selection among the options of ("flip", "mixup").
    default: "flip"
    choices: ["flip", "mixup"]
  auto_augment:
    type: str
    description: Automatically applies a predefined augmentation policy (randaugment, autoaugment, augmix), optimizing for classification tasks by diversifying the visual features.
    default: "randaugment"
    choices: ["randaugment", "autoaugment", "augmix"]
  erasing:
    type: float
    description: Randomly erases a portion of the image during classification training, encouraging the model to focus on less obvious features for recognition.
    default: 0.4
    min: 0.0
    max: 0.9
  crop_fraction:
    type: float
    description: Crops the classification image to a fraction of its size to emphasize central features and adapt to object scales, reducing background distractions.
    default: 1.0
    min: 0.1
    max: 1.0

# Custom config.yaml ---------------------------------------------------------------------------------------------------
cfg: # (str, optional) for overriding defaults.yaml

# Tracker settings ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # (str) tracker type, choices=[botsort.yaml, bytetrack.yaml]
